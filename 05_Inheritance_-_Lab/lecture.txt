Inheritance - capability to inherit other properties

1. It is used ti extend func of other classes in order to eliminate repetitive code.

e.g.:
class Person:
    def __init__(self, name):
        self.name = name

class Employee:
    def __init__(self, name, security_number):
        self.name = name
        self.security_number = security_number

class Teacher:
    def __init__(self, name,security_number, children):
        self.name = name
        self.security_number = security_number
        self.children = children

as you can see - a lot of repetitions!!!
All child classes should answer the question: IS THE CHILD CLASS A PARENT?
In order to use inheritance and to avoid repetition, we need to do it like that:
In order to use inheritance, must use super().__init__()

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def say_name(self):
        return f"Hello, my name is {self.name}"


class Employee(Person):
    def __init__(self, name, age, security_number):
        super().__init__(name, age)
        self.security_number = security_number


class Teacher(Employee):
    def __init__(self, name, age, security_number, children):
        super().__init__(name, security_number, age)
        self.children = children

2. Add feature to class w/out modifying it - create another child class


The super() method - super is the parent class. Other syntaxis =
Person.__init__(self)


1. Single and 2. Multi inheritance.
Multi is divided to:
- multiple:
    - inherit more than 1 class. Possible in Python
    - allows complex relationships. To specify which parent class's init to be used, use Parent.__init__(self, name, ...)
- multilevel - if the parent class is a child to another class.
-hierarchical - when a parent class is parent to many non-connected child classes



